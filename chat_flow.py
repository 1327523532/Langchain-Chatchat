import os
from langchain import PromptTemplate, OpenAI, LLMChain
import requests
from typing import *
from langchain.callbacks.manager import CallbackManagerForLLMRun
from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
from langflow import lcserve
from langflow.main import app
# from chainlit.server import app
from pathlib import Path
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

from langflow.interface import types


class ChatGLM(LLM):
    """ChatGLM LLM service.

    Example:
        .. code-block:: python

            from langchain.llms import ChatGLM
            endpoint_url = (
                "http://127.0.0.1:8000"
            )
            ChatGLM_llm = ChatGLM(
                endpoint_url=endpoint_url
            )
    """

    endpoint_url: str = "http://127.0.0.1:7861/chat"
    """Endpoint URL to use."""
    model_kwargs: Optional[dict] = None
    """Key word arguments to pass to the model."""
    max_token: int = 20000
    """Max token allowed to pass to the model."""
    temperature: float = 0.1
    """LLM model temperature from 0 to 10."""
    history: List[List] = []
    """History of the conversation"""
    top_p: float = 0.7
    """Top P for nucleus sampling from 0 to 1"""
    streaming: bool = False

    @property
    def _llm_type(self) -> str:
        return "ChatGLM"

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"endpoint_url": self.endpoint_url},
            **{"model_kwargs": _model_kwargs},
        }

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call out to a ChatGLM LLM inference endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = chatglm_llm("Who are you?")
        """

        _model_kwargs = self.model_kwargs or {}

        # HTTP headers for authorization
        headers = {"Content-Type": "application/json"}

        payload = {
            "question": prompt,
            # "prompt": prompt,
            # "temperature": self.temperature,
            "history": self.history,
            # "max_length": self.max_token,
            # "top_p": self.top_p,
        }
        # payload.update(_model_kwargs)
        # payload.update(kwargs)

        # print("ChatGLM payload:", payload)

        # call api
        try:
            response = requests.post(self.endpoint_url, headers=headers, json=payload)
        except requests.exceptions.RequestException as e:
            raise ValueError(f"Error raised by inference endpoint: {e}")

        # print("ChatGLM resp:", response)

        if response.status_code != 200:
            raise ValueError(f"Failed with response: {response}")

        try:
            parsed_response = response.json()

            # Check if response content does exists
            if isinstance(parsed_response, dict):
                content_keys = "response"
                if content_keys in parsed_response:
                    text = parsed_response[content_keys]
                else:
                    raise ValueError(f"No content in response : {parsed_response}")
            else:
                raise ValueError(f"Unexpected response type: {parsed_response}")

        except requests.exceptions.JSONDecodeError as e:
            raise ValueError(
                f"Error raised during decoding response from inference endpoint: {e}."
                f"\nResponse: {response.text}"
            )

        if stop is not None:
            text = enforce_stop_tokens(text, stop)
        self.history = self.history + [[None, parsed_response["response"]]]
        return text


template = """问题: {question}

答案: 让我们逐步思考。"""


path = Path(lcserve.__file__).parent
static_files_dir = path / "frontend"
app.mount(
    "/",
    StaticFiles(directory=static_files_dir, html=True),
    name="static",
)

from langflow.template.field.base import TemplateField
from langflow.template.frontend_node.llms import LLMFrontendNode
from langflow.template.template.base import Template
from langflow.interface.llms.base import llm_creator
from langflow.interface.llms import base
from langflow.custom import customs
from langflow.interface import custom_lists
from langflow.api.v1 import endpoints


class ChatGLMNode(LLMFrontendNode):
    name='ChatGLM'
    description='chatglm llm'
    base_classes :List[str] =['ChatGLM', 'BaseLLM', 'BaseLanguageModel']
    template=Template(
        type_name='ChatGLM',
        fields=[
            TemplateField(
                name='question'
            )
        ]
    )

# customs.CUSTOM_NODES.setdefault('llms', {})
# customs.CUSTOM_NODES['llms'].update(
#     ChatGLM = ChatGLMNode(),
# )
custom_lists.CUSTOM_NODES.update(
    ChatGLM = ChatGLM,
)

types.langchain_types_dict['llms']['ChatGLM']={
    'name': 'ChatGLM',
    'display_name': 'ChatGLM',
    'template': {
        'endpoint_url': TemplateField(
                        name='endpoint_url',
                        value='http://127.0.0.1:7861/chat',
                    ).to_dict(),
        'prompt': TemplateField(
                        name='prompt',
                        value='hello',
                    ).to_dict(),
        'streaming': TemplateField(
                        name='streaming',
                        display_name='streaming',
                        value=False,
                        field_type='bool',
                    ).to_dict(),
        '_type': 'ChatGLM',
    },
    'base_classes': ['ChatGLM', 'BaseLLM', 'BaseLanguageModel'],
    'description': 'chatglm llm',
    'documentation': '',
}
base.llm_type_to_cls_dict['ChatGLM'] = ChatGLM
llm_creator.type_dict['ChatGLM'] = ChatGLM


llms = types.langchain_types_dict['llms']
# breakpoint()
types.langchain_types_dict = types.build_langchain_types_dict()


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app)
